use {
    serenity::{
        async_trait,
        client::{Context, EventHandler},
        model::{channel::Message, gateway::Ready, id::ChannelId},
        Client,
    },
    std::sync::Arc,
    tokio::sync::Mutex as TokioMutex,
};

struct Handler {
    counter: Arc<TokioMutex<u32>>,
}

impl Handler {
    fn new(counter: Arc<TokioMutex<u32>>) -> Self {
        Self { counter }
    }

    async fn send_whats_up_message(&self, ctx: &Context) {
        let channel_id = ChannelId(917057579039989773);

        if let Err(why) = channel_id.say(&ctx.http, "What's up ya'll? :D").await {
            eprintln!("Error sending message: {:?}", why);
        }
    }
}

#[async_trait]
impl EventHandler for Handler {
    async fn message(&self, ctx: Context, msg: Message) {
        let counter = self.counter.clone();

        tokio::spawn(async move {
            if msg.author.bot {
                return;
            }

            let mut counter = counter.lock().await;
            *counter += 1;

            if let Err(why) = msg.delete(&ctx).await {
                eprintln!("Error deleting message: {:?}", why);
            }
        });
    }

    async fn ready(&self, ctx: Context, ready: Ready) {
        println!("{} is connected!", ready.user.name);

        self.send_whats_up_message(&ctx).await;
    }
}

#[tokio::main]
async fn main() {
    let token = "MTIwNzM4MDkxNTQ1ODgwNTgwMA.Gw0Zcl.YrtSW4tuNjw7HbWII3mvLzUCet0K62R2jH3-TI";

    let counter = Arc::new(TokioMutex::new(0));
    let handler = Handler::new(counter.clone());

    let mut client = Client::builder(token)
        .event_handler(handler)
        .await
        .expect("Error creating client");

    if let Err(why) = client.start().await {
        println!("Client error: {:?}", why);
    }

    let counter_value = counter.lock().await;
    println!("Total messages processed: {}", *counter_value);
}
